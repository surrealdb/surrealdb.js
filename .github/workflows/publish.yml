name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run only (no actual publishing)"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  # Validate versions first
  validate:
    name: Validate Versions
    runs-on: ubuntu-latest
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Validate package versions
        run: bun run validate:versions ${{ steps.version.outputs.version }}

  # Build SDK package
  build-sdk:
    name: Build SDK
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Build SDK
        run: bun run build:sdk

      - name: Upload SDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdk-artifacts
          retention-days: 1
          path: packages/sdk/dist/

  # Build WASM package (depends on SDK)
  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: [validate, build-sdk]
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        run: cargo install -f wasm-bindgen-cli --version 0.2.101

      - name: Install wasm-opt
        run: cargo install wasm-opt

      - name: Build WASM
        run: bun run build:wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-artifacts
          retention-days: 1
          path: |
            packages/wasm/wasm/
            packages/wasm/dist/

  # Build Node package for all platforms (depends on SDK)
  build-node:
    name: Build Node.js - ${{ matrix.settings.target }}
    runs-on: ubuntu-latest
    needs: [validate, build-sdk]
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            flags: "-x"
          - target: aarch64-apple-darwin
            flags: "-x"
          - target: x86_64-pc-windows-msvc
            flags: "-x"
          - target: i686-pc-windows-msvc
            flags: "-x"
          - target: aarch64-pc-windows-msvc
            flags: "-x"
          - target: x86_64-unknown-linux-gnu
            flags: "--use-napi-cross"
          - target: aarch64-unknown-linux-gnu
            flags: "--use-napi-cross"
          - target: x86_64-unknown-linux-musl
            flags: "-x"
          - target: aarch64-unknown-linux-musl
            flags: "-x"
          - target: armv7-unknown-linux-gnueabihf
            flags: "--use-napi-cross"
          - target: powerpc64le-unknown-linux-gnu
            flags: "--use-napi-cross"
          - target: s390x-unknown-linux-gnu
            flags: "--use-napi-cross"
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ${{ github.workspace }}/.xwin
            ~/.napi-rs
            ./target
          key: ${{ matrix.settings.target }}-cargo-cache

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install ziglang
        uses: mlugg/setup-zig@v2
        with:
          version: 0.14.1

      - name: Install cargo toolchains
        uses: taiki-e/install-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild,cargo-xwin

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Build
        run: bun run build:node --target ${{ matrix.settings.target }} ${{ matrix.settings.flags }}
        env:
          XWIN_CACHE_DIR: ${{ github.workspace }}/.xwin

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          if-no-files-found: error
          path: |
            packages/node/napi/*.node
            packages/node/dist/

  # Dry run publish to verify everything works
  dry-run-publish:
    name: Dry Run Publish
    runs-on: ubuntu-latest
    needs: [build-sdk, build-wasm, build-node, validate]
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-artifacts
          path: packages/wasm/

      - name: Download node binaries
        uses: actions/download-artifact@v4
        with:
          name: bindings-*
          path: packages/node/napi/

      - name: Dry run publish all packages
        run: bun run publish --dry-run
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Actual publish (only if not dry run)
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [build-sdk, build-wasm, build-node, validate, dry-run-publish]
    if: ${{ !github.event.inputs.dry_run || github.event.inputs.dry_run == 'false' }}
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-artifacts
          path: packages/wasm/

      - name: Download node binaries
        uses: actions/download-artifact@v4
        with:
          name: bindings-*
          path: packages/node/napi/

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish all packages
        run: bun run publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Summary job
  summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [validate, dry-run-publish, publish]
    if: always()
    steps:
      - name: Publish Summary
        run: |
          echo "## Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **SDK Build**: ${{ needs.build-sdk.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **WASM Build**: ${{ needs.build-wasm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Build**: ${{ needs.build-node.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ needs.dry-run-publish.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "- **Status**: ✅ Dry run completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Publish**: ${{ needs.publish.result }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.publish.result }}" = "success" ]; then
              echo "- **Status**: ✅ All packages published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ❌ Publish failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
