name: Publishing test

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  # Validate versions first
  validate:
    name: Validate Versions
    runs-on: ubuntu-latest
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Validate package versions
        run: bun run validate:versions

  # Build SDK package
  build-sdk:
    name: Build SDK
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Build SDK
        run: bun run build:sdk

      - name: Upload SDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdk-artifacts
          retention-days: 1
          path: packages/sdk/dist/

  # Build WASM package (depends on SDK)
  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: [validate, build-sdk]
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli --version 0.2.92

      - name: Install wasm-opt
        run: cargo install wasm-opt

      - name: Build WASM
        run: bun run build:wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-artifacts
          retention-days: 1
          path: |
            packages/wasm/wasm/
            packages/wasm/dist/

  # Build Node package for all platforms (depends on SDK)
  build-node:
    name: Build Node.js - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs: [validate, build-sdk]
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              bun run build:node --target x86_64-apple-darwin
              strip -x *.node
          - host: windows-latest
            build: |
              bun run build:node
              bun run test
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              bun run build:node --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && bun run build:node && strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              bun run build:node --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              bun run build:node --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              bun run build:node --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
    steps:
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
      - uses: oven-sh/setup-bun@v2
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: bun config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: bun install
      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          if-no-files-found: error
          path: |
            packages/node/napi/
            packages/node/dist/

  # Dry run publish to verify everything works
  dry-run-publish:
    name: Dry Run Publish
    runs-on: ubuntu-latest
    needs: [build-sdk, build-wasm, build-node, validate]
    steps:
      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-artifacts
          path: packages/sdk/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-artifacts
          path: packages/wasm/

      - name: Download node binaries
        uses: actions/download-artifact@v4
        with:
          name: bindings-*
          path: packages/node/napi/

      - name: Structure
        run: |
          echo "::group::Structure Sdk"
          ls -la packages/sdk/
          ls -la packages/sdk/dist/
          echo "::endgroup::"
          echo "::group::Structure WASM"
          ls -la packages/wasm/
          ls -la packages/wasm/wasm/
          ls -la packages/wasm/dist/
          echo "::endgroup::"
          echo "::group::Structure Node"
          ls -la packages/node/
          ls -la packages/node/napi/
          ls -la packages/node/dist/
          echo "::endgroup::"

      - name: Dry run publish all packages
        run: bun run publish --dry-run
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Actual publish (only if not dry run)
  # publish:
  #   name: Publish Packages
  #   runs-on: ubuntu-latest
  #   needs: [build-sdk, build-wasm, build-node, validate, dry-run-publish]
  #   if: ${{ !github.event.inputs.dry_run || github.event.inputs.dry_run == 'false' }}
  #   steps:
  #     - name: Install Bun
  #       uses: oven-sh/setup-bun@v2

  #     - name: Code Checkout
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: bun install

  #     - name: Download SDK artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: sdk-artifacts
  #         path: packages/sdk/

  #     - name: Download WASM artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: wasm-artifacts
  #         path: packages/wasm/

  #     - name: Download node binaries
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-*
  #         path: packages/node/napi/

  #     - name: Setup NPM authentication
  #       run: |
  #         echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

  #     - name: Publish all packages
  #       run: bun run publish
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Summary job
  summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [validate, dry-run-publish, publish]
    if: always()
    steps:
      - name: Publish Summary
        run: |
          echo "## Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **SDK Build**: ${{ needs.build-sdk.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **WASM Build**: ${{ needs.build-wasm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Build**: ${{ needs.build-node.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ needs.dry-run-publish.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "- **Status**: ✅ Dry run completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Publish**: ${{ needs.publish.result }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.publish.result }}" = "success" ]; then
              echo "- **Status**: ✅ All packages published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ❌ Publish failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
